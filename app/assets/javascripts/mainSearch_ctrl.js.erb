(function (){

  "use strict"; 
  //  angular.module("app", []).controller((){});
  //  }());

  angular.module("app.controllers").controller("mainSearchCtrl", function($scope,$http,$location,$anchorScroll) {

    // =====naming convention====== 
    //  $scope or var camel case
    //  function snake case

      $scope.setup = function(){
      $http.get("/api/v1/autos.json").then(function(response){
      $scope.autoMakers = response.data;
      });
    }

    
    //console.log($scope.autoMakers);
    // post function

      $scope.makeDescription = "Select a Make";
      $scope.modelDescription = "Select a Model";
      $scope.searchDetails = [];
      $scope.makeNames = []; 
      $scope.modelNames = [];
      $scope.autoYearList = [];
      $scope.searchYears = [];

      // Get unique function //
      var unique = function(xs) {
        var seen = {}
        return xs.filter(function(x) {
          if (seen[x])
            return
          seen[x] = true
          return x
        })
      }

     // Change all to upper case function
     Array.prototype.myUcase = function() {
    for (var i = 0; i < this.length; i++) {
        this[i] = this[i].toUpperCase();
      }
    }

      function return_index_of_car_make(car_make,car_array){
        if(car_array.length < 1){
          console.log("the array is empty");
          return null;
        } 
        else {
          // if make is in car arrary return make index 
          for(var i = 0;i < car_array.length;i++ ){
            if(car_make === car_array[i].make){
              console.log("index return");
              return i;
            }
          }
          
          return null;
        }
      }


      function add_new_car(car_make,car_array){
        if(return_index_of_car_make(car_make,car_array) || return_index_of_car_make(car_make,car_array) == 0){
          return 0;
        } 
        else {
            console.log("the array was empty but now adding stuff")
            $scope.makeNames.push(car_make);
            car_array.push({
            make: car_make,
            model: [],
            year: []
          });
            // console.log(car_array);
        }
      }

      function add_new_model(car_model,car_array){
        //check if car array consist of selected model and return 0
        var modelMake = find_model_make(car_model);
        console.log("model maker:")
        console.log(modelMake);
        // acura 
        var addModel = true;
        console.log("add new model:")
        //console.log(modelMake);

        var makeIndex = null;
        // get make car array and return car array index
        for(var i=0;i<car_array.length;i++){          
          if(car_array[i].make.indexOf(modelMake) != -1){
            // check if car array matches make then return 
            makeIndex = i;
            console.log("make Index returned");
            break;
            console.log("should not show");
          }
        }

        // check model matches the make in car array
        if(makeIndex || makeIndex === 0){
          for(var j=0;j<car_array[makeIndex].model.length;j++){
            if(car_array[makeIndex].model[j] === car_model){
              addModel = false;
              console.log("add model false , model exist call remove fx")
            }
          }
        }

        // select object with modelMake then loop through model for model 
        // if model includes model addModel is true else addModel is false

        if(addModel){
          for(var k=0; k<car_array.length;k++){
            if(car_array[k].make === modelMake){
              car_array[k].model.push(car_model);
              console.log("adding follwoing model")
              console.log(car_array[k].model);

            }
          }
        }
        else{
          console.log("reutrning zero cus already exist!")
          return 0;
        }
        // else add model to car array
      }
                
      
      function find_model_make(car_model){
        //loop thru all makers 
        //chevy
        for(var i = 0; i < $scope.autoMakers.length; i++){
          // loop thru all model per maker
          //console.log("finding automaker!");
          for(var j = 0;j< $scope.autoMakers[i].auto_details.auto_models.length;j++){
            //console.log("finding automaker2!");
            if (car_model === $scope.autoMakers[i].auto_details.auto_models[j].model_name){
              console.log("found automaker:");
              console.log($scope.autoMakers[i].make_name);
              return $scope.autoMakers[i].make_name;
            }
          }
          console.log("cant not find make by model");
          console.log(car_model);
        }
      }

      function delete_existing_car(car_make,car_array){
        car_array.splice(return_index_of_car_make(car_make,car_array),1);
        console.log("delete car")
      }

      function show_car_models(car_array){
        //loop thru $scope.searchDetails for make 
        var modelList_by_make = [];
        for(var i = 0; i < $scope.autoMakers.length; i++){
            var temp_modelList = [];
            var autoMakers = $scope.autoMakers[i]; // acura // chevy
            var modelList = autoMakers.auto_details.auto_models; // tsx , mdx // silverado , cobolt
        //base on the make loop thru models and post models 
          for(var j = 0;j < car_array.length;j++){
            //var testing = check_model_matches(car_array[j].make,$scope.modelNames);
            if(car_array[j].make === autoMakers.make_name){  
               console.log("checker for show models");
               console.log(car_array[j]);
               console.log(autoMakers.make_name); 
              for(var k = 0; k < modelList.length; k++){
     
           
                  // temp_modelList.push(modelList[k].model_name);
                  // modelList_by_make[j] = temp_modelList;
                  // car_array[j].model = modelList_by_make[j]; 
                //console.log("storing into modelNames");    
                $scope.modelNames.push(modelList[k].model_name); // store
                
              }
                // remove dup value here
                 $scope.modelNames = unique($scope.modelNames);
                 
            }
          }
        }
      }

      // a = tsx , mdx , silverado , cobolt 

      function check_model_matches(make,model_array){

        for(var j=0;j<$scope.autoMakers.length;j++){
          if($scope.autoMakers[j].make_name === make){
           for(var i=0;i<$scope.autoMakers[j].auto_details.auto_models.length;i++){
            if(model_array.indexOf($scope.autoMakers[j].auto_details.auto_models[i]) === -1){
              return true;
            }
            else{
              return false;
            }
          } 
        }
      }   
    }
 

    function get_make_path(make){
      for(var i=0;i<$scope.autoMakers.length;i++){

        if($scope.autoMakers[i].make_name === make){
          console.log($scope.autoMakers[i]);
          return $scope.autoMakers[i];
        } 
      }
    }
      

      function delete_existing_models(make,model_array){
        for(var i=0;i<$scope.autoMakers.length;i++){ 
          if($scope.autoMakers[i].make_name === make){
            console.log("removed model");
            console.log(model_array);
            for(var j=0;j< $scope.autoMakers[i].auto_details.auto_models.length;j++){
             console.log($scope.autoMakers[i].auto_details.auto_models[j]);
             var model_index = model_array.indexOf($scope.autoMakers[i].auto_details.auto_models[j].model_name);
             //console.log(model_index);
             model_array.splice(model_index,1); 
             console.log("deleted model array:")
             //console.log(model_array);
            }
          }
        }
      }

      function delete_search_model(car_model,car_array){
        //check array for model then remove model
        for(var i=0;i<car_array.length;i++){
          for(var j=0;j<car_array[i].model.length;j++){
            var modelIndex = car_array[i].model[j].indexOf(car_model); 
            if(modelIndex != -1){
              //console.log(car_array[i].model);
              car_array[i].model.splice(modelIndex,1);
              //console.log(car_array[i].model);
            }
          }
        }
      }

      function show_make_description(make){
        for(var i = 0; i < $scope.autoMakers.length; i++){       
          var selected_make = $scope.autoMakers[i];
          if(selected_make.make_name === make){
            $scope.makeDescription = selected_make.make_description;
          }
        }
      }

      function show_car_years(start_year,selected){
        if(selected){
          var current_year = new Date().getFullYear();
            for(var i=current_year;i > start_year;i--){
            $scope.autoYearList.push(i);
            }
            //console.log("show years!");
          }
          else{
            console.log("empty");
            $scope.autoYearList = [];
          }
        }

      function add_new_year(car_year,car_array){
        car_array
      }  


      $scope.addMakesToSearch = function(make){
       if (add_new_car(make, $scope.searchDetails) === 0){
          delete_existing_car(make,$scope.searchDetails);
          delete_existing_models(make,$scope.modelNames);
          $scope.selectedMakeStyle = false;
       }
       else{
          add_new_car(make, $scope.searchDetails);
          show_car_models($scope.searchDetails);
          console.log("added new car and show models");
          //console.log($scope.searchDetails);
          $scope.selectedMakeStyle = true;
          console.log($scope.modelNames);
       }
          show_make_description(make);
        if($scope.searchDetails == 0){
          show_car_years("",false);
        } 
        else{ 
          show_car_years(1980,true);
          console.log("not empty")
        }
      } 

      $scope.selectedModels = [];

      $scope.addModelsToSearch = function(model){
        if(add_new_model(model,$scope.searchDetails) === 0){
          //conosle.log(model);
          console.log($scope.searchDetails[0].model);          
          delete_search_model(model,$scope.searchDetails);
          console.log($scope.searchDetails[0].model);
          var modelIndex = $scope.selectedModels.indexOf(model);
          $scope.selectedModels.splice(modelIndex,1);          
          //console.log("delete search model");
          //console.log($scope.selectedModels);
        }
        else{
          add_new_model(model,$scope.searchDetails);
          console.log($scope.searchDetails[0].model);
          console.log($scope.selectedModels);
          console.log($scope.searchDetails);          
          $scope.selectedModels.push(model);
          $scope.selectedModels = unique($scope.selectedModels);
          console.log("added search model");
        }
      }

      
      $scope.addYearToSearch = function(year){
        
        //store all selected year in an array
        var getYearIndex = $scope.searchYears.indexOf(year);
        if(getYearIndex === -1){
          $scope.searchYears.push(year);  
        }
        else{
          $scope.searchYears.splice(getYearIndex,1);
        }
      console.log($scope.searchYears);
      }      

      var div = document.getElementById('div-user');
      $scope.currentUser = {id: div.getAttribute("data-item-current")};

      console.log($scope.currentUser);

    $scope.getResults = function(searchAnchor){

    
     
        for(var i=0;i<$scope.searchDetails.length;i++){
            if($scope.searchDetails[i].model.length < 1){
              alert("missing model in " + $scope.searchDetails[i].make);
            }
          }              


      //name: div.getAttribute("data-item-name")

      var searchAllParams = {
        id: $scope.currentUser,
        details: $scope.searchDetails,
        years: $scope.searchYears
      }

      //console.log(searchAllParams);

      $http.post("/api/v1/autos/search.json", searchAllParams).then(function(response){
        $scope.searchResults = response.data;
        //console.log($scope.searchResults);
        $scope.returnedResults = compact($scope.searchResults);
      });

 

    }

    function compact(array) {
      var newArray = new Array();
      for (var i = 0; i < array.length; i++) {
        if (array[i].length > 0) {
          newArray.push(array[i]);
        }
      }
      console.log(newArray);
      return newArray;
    }

    $scope.modelPanelStatus = function(){
      if($scope.searchDetails.length < 1){
        return true;
      } 
      else{
        return false;
      }
    }

    $scope.descriptionShown = false;
    $scope.toogleDescription = function(){
      $scope.descriptionShown = !$scope.descriptionShown;
    }

    $scope.showPanel = function(show,make){
      if(show && $scope.searchDetails.length < 1){
        $scope.showOnePanel=true;
        $scope.showDescription = return_desc_by_make(make);
      } 
      else if(show && $scope.searchDetails.length >= 1){
        $scope.showTwoPanel=true;
        $scope.showOnePanel=false;
        $scope.showDescription = return_desc_by_make(make);
        //console.log("running show2");
      }
      else{
        $scope.showOnePanel=false;
        $scope.showTwoPanel=false;
      }
    }

    $scope.showPanelTwo = function(show,model){
      if(show && $scope.searchDetails.length >= 1){
        $scope.showTwoPanel=true;
        $scope.showOnePanel=false;
        $scope.showDescription = model;
        //console.log("running show3");
      }
      else{
        $scope.showOnePanel=false;
        $scope.showTwoPanel=false;
      }      
    }

    $scope.showInnerPanel = function(panelOneStatus,panelTwoStatus){
      if(panelOneStatus && panelTwoStatus === false){
        return false;
      }
      else {
        return true;
      }
    }

    $scope.showInnerPanelYear = function(panelOneStatus,panelTwoStatus){
      if(panelOneStatus && panelTwoStatus === false){
        return false;
      } 
      else if(panelTwoStatus && panelOneStatus === false){
        return false;
      }
      else{
        return true;
      }
    }

    $scope.show = "";

    function return_desc_by_make(make){
      for(var i=0;i<$scope.autoMakers.length;i++){
        if($scope.autoMakers[i].make_name === make){
          return $scope.autoMakers[i].make_description;
        }
      }
    }


    window.$scope = $scope;
  

  });
})();